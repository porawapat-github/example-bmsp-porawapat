import React, { useEffect, useState } from 'react';
import {
    FloatButton,
    Modal,
    Input,
    Button,
    List,
    Space,
    Tag,
    Divider,
    Card,
    message,
} from 'antd';
import {
    CloudOutlined,
    CheckSquareOutlined,
    DeleteOutlined,
    PlusOutlined,
    EditOutlined,
} from '@ant-design/icons';

const weatherCodeMap = {
    0: { label: '‡∏ü‡πâ‡∏≤‡πÉ‡∏™', icon: '‚òÄÔ∏è', color: 'gold' },
    1: { label: '‡πÅ‡∏î‡∏î‡∏à‡πâ‡∏≤', icon: 'üåû', color: 'orange' },
    2: { label: '‡∏°‡∏µ‡πÄ‡∏°‡∏Ü‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢', icon: '‚õÖ', color: 'blue' },
    3: { label: '‡πÄ‡∏°‡∏Ü‡∏°‡∏≤‡∏Å', icon: '‚òÅÔ∏è', color: 'gray' },
    45: { label: '‡∏°‡∏µ‡∏´‡∏°‡∏≠‡∏Å', icon: 'üå´Ô∏è', color: 'cyan' },
    48: { label: '‡∏´‡∏°‡∏≠‡∏Å‡∏´‡∏ô‡∏≤', icon: 'üåÅ', color: 'geekblue' },
    51: { label: '‡∏ù‡∏ô‡∏õ‡∏£‡∏≠‡∏¢‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢', icon: 'üå¶Ô∏è', color: 'blue' },
    53: { label: '‡∏ù‡∏ô‡∏õ‡∏£‡∏≠‡∏¢‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á', icon: 'üåßÔ∏è', color: 'blue' },
    55: { label: '‡∏ù‡∏ô‡∏õ‡∏£‡∏≠‡∏¢‡∏´‡∏ô‡∏±‡∏Å', icon: 'üåßÔ∏è', color: 'volcano' },
    61: { label: '‡∏ù‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢', icon: 'üå¶Ô∏è', color: 'cyan' },
    63: { label: '‡∏ù‡∏ô‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á', icon: 'üåßÔ∏è', color: 'geekblue' },
    65: { label: '‡∏ù‡∏ô‡∏´‡∏ô‡∏±‡∏Å', icon: 'üåßÔ∏è', color: 'volcano' },
    71: { label: '‡∏´‡∏¥‡∏°‡∏∞‡∏ï‡∏Å‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢', icon: '‚ùÑÔ∏è', color: 'blue' },
    73: { label: '‡∏´‡∏¥‡∏°‡∏∞‡∏ï‡∏Å‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á', icon: '‚ùÑÔ∏è', color: 'cyan' },
    75: { label: '‡∏´‡∏¥‡∏°‡∏∞‡∏ï‡∏Å‡∏´‡∏ô‡∏±‡∏Å', icon: '‚ùÑÔ∏è', color: 'volcano' },
    95: { label: '‡∏û‡∏≤‡∏¢‡∏∏‡∏ù‡∏ô‡∏ü‡πâ‡∏≤‡∏Ñ‡∏∞‡∏ô‡∏≠‡∏á', icon: '‚õàÔ∏è', color: 'red' },
    99: { label: '‡∏û‡∏≤‡∏¢‡∏∏‡∏ù‡∏ô‡∏ü‡πâ‡∏≤‡∏Ñ‡∏∞‡∏ô‡∏≠‡∏á‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á', icon: 'üå©Ô∏è', color: 'red' },
};

const FloatingInfo = () => {
    const [weather, setWeather] = useState(null);
    const [todos, setTodos] = useState([]);
    const [isWeatherOpen, setWeatherOpen] = useState(false);
    const [isTodoOpen, setTodoOpen] = useState(false);
    const [newTodo, setNewTodo] = useState('');
    const [newDate, setNewDate] = useState('');
    const [newTime, setNewTime] = useState('');
    const [editIdx, setEditIdx] = useState(null);
    const [editText, setEditText] = useState('');
    const [editDate, setEditDate] = useState('');
    const [editTime, setEditTime] = useState('');

    useEffect(() => {
        const fetchWeather = async () => {
            try {
                const res = await fetch(
                    'https://api.open-meteo.com/v1/forecast?latitude=13.75&longitude=100.5&current=temperature_2m,weathercode,wind_speed_10m,relative_humidity_2m'
                );
                const data = await res.json();
                setWeather(data.current);
            } catch (err) {
                console.error('‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', err);
            }
        };
        fetchWeather();
    }, []);

    const handleAdd = () => {
        if (newTodo.trim() && newDate && newTime) {
            setTodos([...todos, { text: newTodo, date: newDate, time: newTime, done: false }]);
            setNewTodo('');
            setNewDate('');
            setNewTime('');
            message.success('‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß');
        } else {
            message.warning('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö');
        }
    };

    const handleDelete = (idx) => {
        setTodos(todos.filter((_, i) => i !== idx));
        message.info('‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß');
    };

    const handleEdit = (idx) => {
        setEditIdx(idx);
        setEditText(todos[idx].text);
        setEditDate(todos[idx].date);
        setEditTime(todos[idx].time);
    };

    const handleSaveEdit = () => {
        const updated = todos.map((item, idx) =>
            idx === editIdx ? { ...item, text: editText, date: editDate, time: editTime } : item
        );
        setTodos(updated);
        setEditIdx(null);
        setEditText('');
        setEditDate('');
        setEditTime('');
        message.success('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß');
    };

    const handleToggleDone = (idx) => {
        setTodos(
            todos.map((item, i) => (i === idx ? { ...item, done: !item.done } : item))
        );
    };

    const pendingTodos = todos.filter((item) => !item.done);
    const completedTodos = todos.filter((item) => item.done);

    const weatherDetail = weather ? weatherCodeMap[weather.weathercode] : null;

    return (
        <>
            <FloatButton
                icon={<CloudOutlined />}
                tooltip="‡∏î‡∏π‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®"
                onClick={() => setWeatherOpen(true)}
                style={{ insetInlineEnd: 24, insetBlockEnd: 30 }}
            />
            <FloatButton
                icon={<CheckSquareOutlined />}
                tooltip="ToDo List"
                onClick={() => setTodoOpen(true)}
                style={{ insetInlineEnd: 84, insetBlockEnd: 30 }}
            />

            {/* Modal ‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏® */}
            <Modal
                title="‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û)"
                open={isWeatherOpen}
                onCancel={() => setWeatherOpen(false)}
                footer={null}
                centered
            >
                {weather ? (
                    <Card
                        variant="outlined"
                        style={{ backgroundColor: '#f0f5ff' }}
                        title={`${weatherDetail?.icon || '‚ùî'} ${weatherDetail?.label || '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö'}`}
                        extra={<Tag color={weatherDetail?.color || 'default'}>W-Code: {weather.weathercode}</Tag>}
                    >
                        <p><strong>üå°Ô∏è ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥:</strong> {weather.temperature_2m} ¬∞C</p>
                        <p><strong>üíß ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ó‡∏ò‡πå:</strong> {weather.relative_humidity_2m} %</p>
                        <p><strong>üí® ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏•‡∏°:</strong> {weather.wind_speed_10m} m/s</p>
                        <p><strong>üïí ‡πÄ‡∏ß‡∏•‡∏≤‡∏ß‡∏±‡∏î:</strong> {new Date(weather.time).toLocaleString()}</p>
                    </Card>
                ) : (
                    <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</p>
                )}
            </Modal>

            {/* Modal ToDo */}
            <Modal
                title="ToDo List"
                open={isTodoOpen}
                onCancel={() => setTodoOpen(false)}
                footer={null}
                width={600}
            >
                <Space direction="vertical" style={{ width: '100%' }}>
                    <Input
                        placeholder="‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥"
                        value={newTodo}
                        onChange={(e) => setNewTodo(e.target.value)}
                        onPressEnter={handleAdd}
                    />
                    <div style={{ display: 'flex', gap: 16 }}>
                        <Input
                            type="date"
                            value={newDate}
                            onChange={(e) => setNewDate(e.target.value)}
                            style={{ maxWidth: 180 }}
                        />
                        <Input
                            type="time"
                            value={newTime}
                            onChange={(e) => setNewTime(e.target.value)}
                            style={{ maxWidth: 120 }}
                        />
                    </div>
                    <Button
                        type="primary"
                        icon={<PlusOutlined />}
                        onClick={handleAdd}
                        block
                    >
                        ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                    </Button>
                </Space>

                <Divider orientation="left">‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥</Divider>
                <List
                    dataSource={pendingTodos}
                    locale={{ emptyText: '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£' }}
                    renderItem={(item, idx) => (
                        <List.Item
                            actions={[
                                <Button icon={<EditOutlined />} size="small" onClick={() => handleEdit(todos.indexOf(item))} />,
                                <Button icon={<DeleteOutlined />} size="small" danger onClick={() => handleDelete(todos.indexOf(item))} />,
                                <Button size="small" type="primary" onClick={() => handleToggleDone(todos.indexOf(item))}>
                                    ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
                                </Button>,
                            ]}
                        >
                            <Card size="small" style={{ width: '100%' }}>
                                <p><strong>{item.date} ‡πÄ‡∏ß‡∏•‡∏≤ {item.time}</strong>: {item.text}</p>
                                <Tag color="blue">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à</Tag>
                            </Card>
                        </List.Item>
                    )}
                />
            </Modal>

            {/* Modal ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ */}
            <Modal
                title="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"
                open={editIdx !== null}
                onCancel={() => setEditIdx(null)}
                onOk={handleSaveEdit}
                okText="‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å"
                cancelText="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"
            >
                <Space direction="vertical" style={{ width: '100%' }}>
                    <Input value={editText} onChange={(e) => setEditText(e.target.value)} />
                    <Input type="date" value={editDate} onChange={(e) => setEditDate(e.target.value)} />
                    <Input type="time" value={editTime} onChange={(e) => setEditTime(e.target.value)} />
                </Space>
            </Modal>
        </>
    );
};

export default FloatingInfo;
